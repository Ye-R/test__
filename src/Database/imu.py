import cv2
import serial
import time
import sys
import os

# from Record import imu_show

sys.path.append(os.path.dirname(__file__))

from Flag import Flag


class Imu:
    def __init__(self, port, baud, flag: Flag):
        self.__data = [0, 0, 0, 0, 0, 0]
        self.flag = flag
        self.__imu_initializing_success = False

        try:
            # 해당 port와 baudrate 설정해서 serial 통신 설정
            self.__serial = serial.Serial(port, baud)
            self.__imu_initializing_success = True
            print("[IMU Intializing \tOk  ]")
        except serial.serialutil.SerialException as e:
            print("[IMU Intializing \tFail] \tCheck your COMPORT: ", e)

    def main(self):
        if self.__imu_initializing_success:
            print("Start IMU \t- Success\n")
            time.sleep(1)
            self.__read_imu()
        else:
            print("Start IMU \t- Fail: \tIMU doesn't initialize succeessfully. Therefore, IMU will not run.")
        print("\t\t\t\t-->\tTerminate IMU")

    def __read_imu(self):
        line = list()
        while not self.flag.system_stop:  # By stoping system, Reading IMU should be stopped, too.
            if self.flag.imu_stop:
                time.sleep(0.1)  # Connection to IMU is Valid. But do not read data from IMU.
            else:
                for c in self.__serial.read():
                    line.append(chr(c))
                    if c == 10:
                        self.__parse_imu(line)
                        line.clear()
        time.sleep(0.1)
        print("Terminating IMU")
        self.__serial.close()

    def __parse_imu(self, data):
        tmp = ''.join(data)
        if data == ['\n']:
            return 0
        if tmp[0] == '1':
            # 세부 data는 DB ppt 참고
            try:
                # tmp = tmp.split('*')[1].split('\r')[0]
                datas = tmp.split(',')
                datas[7] = datas[7].rstrip("\r\n")
                roll = float(datas[1])
                pitch = float(datas[2])
                yaw = float(datas[3])
                ax = float(datas[4])
                ay = float(datas[5])
                az = float(datas[6])
                self.__data = [roll, pitch, yaw, ax, ay, az]
                # imu_image = imu_show.imu_show(self.__data) # imu monitoring
                # cv2.imshow("imu", imu_image)
                # cv2.waitKey(1)
            except Exception as e:
                print("[IMU Running \tError] \t\tInvalid data is generated by IMU. Check IMU status:", e)
                time.sleep(1)

    # roll, pitch, yaw값만 사용할때
    def __parse_imu2(self, data):
        tmp = ''.join(data)
        if data == ['\n']:
            return 0
        else:
            try:
                tmp.replace('\r', '').replace('\n', '')
                datas = tmp.split(',')
                roll = float(datas[1])
                pitch = float(datas[2])
                yaw = float(datas[3])
                self.__data = [roll, pitch, yaw]
            except Exception as e:
                print("[IMU Running \tError] \t\tInvalid data is generated by IMU. Check IMU status:", e)
                time.sleep(1)

    @property
    def data(self):
        return self.__data


if __name__ == "__main__":
    imu = Imu('COM3', 115200, Flag())
    imu.main()
