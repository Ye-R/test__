import serial
import time
import sys
import os

sys.path.append(os.path.dirname(__file__))

from Flag import Flag


class GPS:
    def __init__(self, port, baud, flag: Flag):
        self.__data = None
        self.flag = flag
        self.__gps_initializing_success = False

        try:
            #해당 port와 baudrate 설정해서 serial 통신 설정
            self.__serial = serial.Serial(port, baud, timeout=0)
            self.__gps_initializing_success = True
            print("[GPS Intializing \tOk  ]")
        except serial.serialutil.SerialException as e:
            print("[GPS Intializing \tFail] \tCheck your COMPORT: ", e)

    def main(self):
        if self.__gps_initializing_success:
            print("Start GPS \t- Success\n")

            # with open("gps1025_3.txt", 'w') as df:#, open("gps_nmea1.txt", 'w') as nf: #Gps logging
            time.sleep(1)
            self.__read_gps()

        else:
            print("Start GPS \t- Fail: \tGPS doesn't initialize succeessfully. Therefore, GPS will not run.")
        print("\t\t\t\t-->\tTerminate GPS")

    def __read_gps(self):
        line = list()
        while not self.flag.system_stop:  # By stoping system, Reading GPS should be stopped, too.
            if self.flag.gps_stop:
                time.sleep(0.1)  # Connection to GPS is Valid. But do not read data from GPS.
            else:
                for c in self.__serial.read():
                    line.append(chr(c))

                    if c == 10:
                        self.__parse_gps(line)
                        line.clear()
        time.sleep(0.1)
        print("Terminating GPS")
        self.__serial.close()

    def __parse_gps(self, data):
        tmp = ''.join(data)
        if data == ['\n']:
            return 0
        try:
            # tmp = tmp.split("$")[1]
            datas = tmp.split(',')

        except:
            datas = ["123123123123123"]

        # if datas[0] == "GNGLL":
        # 세부 data는 DB ppt 참고
        try:
            # print(datas[0])
            # print(datas)
            t = float(datas[1])
            lad = float(datas[3])
            NS = datas[4]
            lon = float(datas[5])
            EW = datas[6]
            quality = datas[2]
            speed = float(datas[7])
            deg = self.GPS_converter(lad, lon)
            # print(t, lad, NS, lon, EW, quality, speed, "In degree:", deg[0], "  ", deg[1])
            self.__data = [t, lad, NS, lon, EW, quality, deg[0], deg[1], speed]  # send speed too
            # with open("gps_logging/gps1025_3.txt", 'a') as df: #Gps logging
            #      df.writelines(str(deg[0]) + "," + str(deg[1]) + "\n")
            # with open("gps_nmea2.txt", 'a') as nf:
            #     nf.writelines(str(lad) + " " + str(NS) + "," + str(lon) + " " + str(EW) + "\n")

        except Exception as e:
            print("[GPS Running \tError] \t\tInvalid data is generated by GPS. Check GPS status:", e)
            time.sleep(1)

    # Nmea data는 Gps format을 degree.minute로 나타내서 only degree 형식으로만 나타내려면 변환시켜줘야함.
    def GPS_converter(self, lat, lon):
        minute_lad = lat % 100
        degree_lad = (lat - minute_lad) / 100
        latitude = degree_lad + minute_lad / 60

        minute_lon = lon % 100
        degree_lon = (lon - minute_lon) / 100
        longitude = degree_lon + minute_lon / 60
        lis = [latitude, longitude]
        return lis

    @property
    def data(self):
        return self.__data


if __name__ == "__main__":
    gps = GPS('COM8', 9600, Flag())
    gps.main()
